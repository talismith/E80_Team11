---
title: "Lab 1: Go Autonomous"
---

::: {.callout-warning}
**UNDER CONSTRUCTION, DO NOT USE FOR PRELAB**
:::

Team size: 4
[Submission Sheet](/labs/lab2/submission.qmd) [Word](/labs/lab2/submission.docx)
[Writing](/labs/lab2/writing.qmd)

## Learning Objectives

After successful completion of this lab, you will be able to...

1. Explain the basic operation of your robot, including details about the battery powering it. 
2. Autonomously navigate your robot through an obstacle course.
3. Explain the limitations and challenges of open loop control and articulate how a closed loop design addresses them


## 0. Introduction

The objectives of this lab are to transform the ROV (remotely operated vehicle) used in E79 into an AUV (autonomous underwater vehicle). An ROV is controlled from the surface through long cables, but an AUV carries an autonomous controller on board. While most AUVs built in Lab 1 will look the same, students will modify these vehicles as the course progresses so that by end of semester, each will be configured and equipped for unique ocean-sampling experiments.

Lab 1 is completed in teams of 4. 

Be sure to read the [Lab Overview](../lab_overview/index.qmd) to learn about safety requirements, expensive equipment handling and other rules.  You must review all SAFETY QUESTION boxes below as part of prelab.  If you ever reach a safety question box and either can't answer it or feel unsure, grab an instructor.


## 2. Motherboard Assembly

For E80, a motherboard has been designed to interface the major electrical components of your AUV. Familiarize yourself with the components on the motherboard by reading the [Introduction to the E80 Motherboard](https://drive.google.com/file/d/18bMajGNwH1K2yHB1dQLZRx5eqrYiNQWA/view?usp=sharing) document.  You will add some necessary components to the board in Lab 1. Use this [motherboard assembly document](https://docs.google.com/document/d/1v1vE3GXXUw8o6T2IJJws_xr_b3ntKiPx/edit?usp=sharing&ouid=105511935419108795487&rtpof=true&sd=true) as a guide and add the components.  For reference, the schematic for the motherboard is [here](https://drive.google.com/file/d/1pk_mORYsxhedKjjqzhMrxj9H5ZVH3zqp/view?usp=sharing) , the layout is [here](https://drive.google.com/file/d/1pmm8xwpyAHAL5YvwMIQma4W8DuV-MP31/view?usp=sharing) , and [KiCAD](https://www.kicad.org/) design files are  [here](https://drive.google.com/file/d/1pi9WNW7WoIx80xgb_0LWSUyA-LMfp94Z/view?usp=sharing).


There are two ways that **you can damage your motherboard irreparably** during this process, and you should take precautions against each of them. One is soldering components in the wrong position or orientation (e.g., screw terminals facing inward or header on the back side of the board), which is very difficult to rework. Double check that you are using the correct header and try fitting all the pieces together before soldering. The other is flipping power and ground by attaching your battery or power supply leads backwards or soldering the red and black wires to the incorrect terminals on the motherboard. Have an instructor or proctor check your battery connector, and make sure to heed the warnings in the assembly guide.

:::{.callout-warning collapse="true"}
## SAFETY QUESTION: What are the two ways I can damage my board in this section?

Soldering components in the wrong position or orientation, and attaching battery or power supply leads backwards.
:::

1. Checkout your motherboard from a professor and find the other parts you need in the parts rack on the central table.
2. Label your board: Before you begin assembly, **write your section number, team number and board version on your board.** This will be version 1 for all of you, you will increment your version if, for example, your board blows up and you have to make a new one.
3. Take precautions to keep everything working before soldering
    i) Double check that you are using the correct header and try fitting all the pieces together before soldering. 
    ii) Have an instructor or proctor check your battery connector and power supply connector polarity.
4. Cover the back of your motherboard with insulating foam sheet using these[ instructions](https://drive.google.com/open?id=1x0CMBDFia2uY5qxPkWFfg_pN3FcR7Pth) to prevent inadvertent short circuits when you set it down. 
5. Find a sharpie and color the GND side of your P.S. screw black, so that you don't forget the polarity of the connector.


## 4.  Motherboard Validation, IMU Calibration, and IMU Error Measurement

Your motherboard has a circuit on it called an inertial measurement unit (IMU), specifically an [LSM303AGRTR](https://www.st.com/content/ccc/resource/technical/document/datasheet/74/c4/19/54/62/c5/46/13/DM00177685.pdf/files/DM00177685.pdf/jcr:content/translations/en.DM00177685.pdf) , which allows you to measure acceleration and magnetic fields. This is a useful sensor that we will explore more later in the course. We are just getting started with the sensor in this section by  calibrating the output and measuring its noise statistics.  This sensor is also useful because you can only measure its output if your motherboard is working correctly. The tests in this section will ensure that your Teensy can: listen to the IMU, write to the SD card, and drive the motors.

First, test your motherboard:

1. Sign out an SD card from an instructor. 
2. Put your Teensy and your SD card into your motherboard and program the Teensy with your code from Section 3. This sketch will turn on one motor for four seconds if it is working properly, so be sure your motors are clear of any obstructions (especially your hands!) when you run the code. 
3. Provide power to the Teensy using either your battery or the power supply terminals (be careful with the polarity!). You can use the power supply terminals if your battery is still charging. Several lights should turn on, including PWR LED, the IMU LED, the SD LED, and a small blinking LED on top of the Teensy. 
4. You have the option of plugging in your USB cable so you can use the serial monitor to watch the Teensy's serial output as it runs.
5. Remove power from your board (you do not need to remove the USB cable if it's plugged in).
6. Take out the SD card and put it into your computer. 
7. Take the INF and BIN files off of the SD card and read them according to the following instructions. 
    i) The Teensy creates two files to save data every time it runs: an INF file which contains text and a BIN file which contains your measured data in a binary format. 
    ii) Special programs are required to decode the binary data, and those programs also depend on having a matching INF file. We provide a MATLAB script for reading SD card data: [logreader.m](https://github.com/HMC-E80/E80-SP2023/blob/main/MATLAB/logreader.m). 
    iii) These links provide [sample INF](https://drive.google.com/open?id=18-MICAN9QopCYHtpTnUVNme07YvaUmFD) and [sample BIN](https://drive.google.com/open?id=1h086niwvAh4C3Gs6r4vE12ZvaD1KYria) files so you can test the MATLAB scripts during prelab. The sample file is very noisy, so it can't be used to find answers to the questions later in Section 4.
8. Verify that you are saving the following data to your SD card: acceleration values from your accelerometer, magnetic field strengths from your magnetometer, roll, pitch and yaw angles calculated from your IMU measurements, and motor PWM values.
9. Verify that your motherboard can drive motors by attaching motors to motor ports A, B and C and modifying your code to drive each of them. If your motors are not yet ready, you may measure the voltages at screw terminals A, B and C to observe whether they are being correctly applied by your software.


:::{.callout-warning}
Please be very careful when connecting or disconnecting the micro USB cable to the Teensy!! Pull or push laterally while holding down the connector with your other hand.  They are fragile and can be pulled off the board easily.
:::

:::{.callout-note}
You can put your Teensy into programmer mode manually by pressing the button on top of the Teensy. This button won't reset your program, but instead delete all the code on the Teensy so it can be reprogrammed. If you just want to rerun your current program, remove power from the Teensy (maybe using the black power rocker switch) and then restore power.
:::

Second, analyze the data from your accelerometer:

1. Use the acceleration due to gravity to figure out the size of one 'accelerometer unit' in your saved data: i.e.: if your accelerometer reports a value of 1, how many m/s^2 of acceleration is the accelerometer experiencing? 
2. Figure out the value the accelerometer reports when it is experiencing zero acceleration on each axis. You may need to run your program a few times while holding the board in different orientations to make each axis zero.
3. Lay your board flat on its standoffs, then take ten seconds of accelerometer data. Determine the mean, the standard deviation, the standard error, and the 95% confidence bounds for a static acceleration measurement in the z direction.

## 5. Penetrator and Motor Assembly

In E80 we use special bolts to make waterproof electrical connections across a robot (Figure @fig-penetrator-bolt), and we refer to them as penetrators.  Penetrators are combined with a nut and gasket (Figure @fig-nut-and-gasket) to make waterproof seals on project boxes (Figure @fig-project-box-with-penetrator-bolt).  This figure shows two important details about using penetrator bolts: the threads must point INTO the box and the washer must be OUTSIDE the box. 

::: {#fig-penetrators layout-ncol=3}

::: {#fig-penetrator-bolt}
![](img/penetrator-bolt.jpg)

Penetrator bolt.
:::
::: {#fig-nut-and-gasket}
![](img/penetrator-bolt-with-nut.jpg)

Penetrator nut and gasket.
:::
::: {#fig-project-box-with-penetrator-bolt}
![](img/project-box-with-penetrator-bolt.jpg)

Project box with penetrator bolt assembly.
:::

Project box and penetrator bolt details
:::


These penetrators have six wires passing through them because your AUV will use three motors, whcih you must prepare. 

1. Look through the stock of motors and select three motors. You may cut them off the used E79 umbilicals if the standalone motor box does not have any useful motors for you. If necessary, you can prep new motors as you did in E79, but your time will be very limited if you must build motors. Instructions can be found [here](https://sites.google.com/g.hmc.edu/e79-practicum/module-1/practicum-1a). 
2. Test your motors using a power supply to make sure they work:
    i) If the current draw during this test is more than 500 mA, then the friction in your motor is likely to severely limit your top speed; consider debugging it.  
    ii) Selecting motors that have similar current draws may simplify your software because the motors will exert similar thrusts at the same level of applied PWM.
    iii) Make sure your motors still work when they are submerged in water.
3. Solder the leads of your three motors.  Your motors will be OUTSIDE of the box, so your solder joints will need to be waterproofed with heat shrink tuing. After putting heat shrink on your wires, solder the motor leads to the twisted pair on the non-threaded side of your penetrator bolt. Finish Waterproofing your solder joints with heat shrink tubing. 
4. Test that all three motors work when the waterproofed solder joints are underwater.


## 6. AUV Assembly

First, assemble your project box: PICTURES

1. Find a waterproof box on the central table of the lab. 
2. DRILL OUT YOUR PENETRATOR HOLES USING A STEP DRILL
3. Attach your penetrator and motor assembly to the box (remember threads are in and washer is on the outside). 
4. Hold your box and penetrator combination underwater to check for leaks. DON'T perform this test with any electronics or batteries in the box. 
5. If you find leaks, fix them before proceeding.  Ask for help if you're stuck.

Second, assemble your robot: PICTURES

1. Dry your box and place your battery, motherboard and Teensy into the box. 
2. Use Velcro to attach the box to a PVC robot frame. Make sure to select a frame that has a plastic mesh on the bottom for carrying payloads. 
3. If you need to add a plastic mesh, use zip ties to secure it to the robot frame.

Third, ballast your robot so that it is close to neutrally buoyant. PICTURE OF BALLAST

1. Determine how much mass to add. To do this, it helps to know the mass of your robot, and that the robot (including motors and two 1.25'' foam blocks, but not including the watertight box) has a buoyancy force measured to be approximately 10 N. You can do this approximately in prelab with a guess at your robot's mass.
2. Select weights for ballasting. Pictures of some of the weights we have available are in FIGURE X. Be mindful that their distribution inside of your payload box could affect the resting pitch, yaw or roll of the robot. It may be useful to adjust the resting buoyancy, pitch, yaw, and roll of your robot with the waterproof box before attempting the obstacle course in section 7. 
3. Protect against metal shorts. Many of the weights we use are metal, so they can short the back of your motherboard.  Make sure the back of your motherboard is covered with insulating foam or electrical tape before setting it on top of your ballast. We also recommend wrapping your ballast in plastic wrap. PICTURE


## 7. Open Loop Control Navigation

A simple obstacle course will be set up in the test tank. You must navigate your robot through 3 hoops IN FIGURE X as pictured [here](https://drive.google.com/file/d/1cPRYAAH8nNd4z_daR9zeMKnhbt3fVw_g/view?usp=sharing), [here](https://drive.google.com/file/d/1LSbtq-jKKMQwlefHNDO72OFRp0G_OosE/view?usp=sharing), and [here](https://drive.google.com/file/d/1OGl3oxe45qmDD3jOou5rWVhgW8yni4oq/view?usp=sharing).

1. Modify the Arduino test program from step 3 to direct your robot to traverse the course so that it ends within the red hoop (3). You can assume your AUV can start in the middle of the yellow hoop (1).  Make sure your code accounts for the time you will need to seal up the waterproof box, attach it to the robot frame, and position it in the water.
2. Be sure to test your code with your robot ahead of time, in air and in a dunk tank, before you visit the test tank room. It is important to know how to control each motor, including which direction each motor turns. It is also important to verify that you are correctly logging data.
3. Get your robot checked by an instructor, go to the tank room, and deploy your robot. You will only have 5 attempts in the test tank room. 

:::{.callout-note}
Our robots are navigating using open loop control, so traversing the obstacle course might be difficult because of motor behaviors, currents in the tanks, variations in the setup, or many other reasons.  Closed loop control can address some of these issues.
:::


## 8. Acceleration and Orientation Data

Plot the AUV acceleration data as a function of sample number from the experiment in step 7.  Confirm that positive acceleration is in the correct direction.  Confirm qualitatively whether the measured acceleration data matches your expectations, and retake data if needed.

Finally, consider the E79 robot model BELOW adn the E79 motor thrust curve BELOW.  Use the model and the thrust curve to make predictions of your peak acceleration when your motors first turn on from rest.  Compare that prediction to your measured data.

:::{.callout-note}
This comparison is a good example of how E79 can be applied and a good example of how to compare experimental data to theory.  The comparison also can be affected by differences between your motors compared and this motor curve, and that variability makes another case for using closed loop control.
:::


## 9. Deliverables

All labs require two submissions per group. The first submission is a submission sheet in which specific data must be shown. The submission sheet is due at the end of the 4-hour lab period and must be uploaded before the end of your lab session at 5:15 pm.  Note that only **ONE** member of each team should access and submit the submission sheet.  It is the responsibility of that team member to add the rest of the team's names to the submission sheet.  

**For pre-lab purposes**, a sample submission sheet that contains all of the questions and requirements on the submission sheet is [here](https://docs.google.com/document/d/1IdCT00qJ_P5gtN7wcFKwaBd6rTRSuXSB/edit?usp=sharing&ouid=100121681850908143159&rtpof=true&sd=true). 

The second submission is a writing assignment, usually around 1 page in length. Each writing assignment will be based on a prompt and must be completed by each student individually; no collaboration is allowed on the text or figures in these assignments, though you may speak among yourselves about concepts in keeping with the collaboration rules of the course. A first draft of the writing assignment must be uploaded by noon on Friday, and you need to bring a printed copy of your draft to the writing and reflection section on Friday at 1:15 pm. During the first hour of the writing and reflection, you will engage in a peer editing exercise. The second hour of the Writing and Reflection section is reserved for you to edit your draft to produce a final draft of the writing assignment. This final draft must be uploaded before the end of the Writing and Reflection section on Friday at 3:15 pm. The [prompt](https://drive.google.com/file/d/1FPFqd0ZnJcfwMfKFVoNy0DByp9T9axu7/view?usp=sharing) and [guided peer feedback worksheet](https://drive.google.com/file/d/1FcMpVTSb6hSvgote7KdVcmwAaD1l9oxq/view?usp=sharing) for Lab 1 are linked, note that the rubric is included in the prompt.

Recall that **no late work is accepted**, we will grade whatever is submitted at the deadlines. Since multiple submissions are allowed, you may want to submit a less-than-perfect draft early as insurance against missing the deadline.

After the writing and reflection section at the end of each week every person (not just one person per team) must submit a team dynamics check-in survey. These are part of your participation grade.  The survey link can be found on the home page.

**IMPORTANT CLEANUP**:  Please return the battery charger and ballast weights to the center table.  These will be shared among the different lab sections. Also, put your board, Teensy, penetrator bolt (with motors), battery and robot frame in your labelled Tupperware container in the cupboard. Please return SD card and SD card reader to the proctor or Lynn.
